package dev.hypix.dataparser.banner;

import java.util.Set;
import java.util.Map.Entry;

import com.alibaba.fastjson2.JSONObject;

import dev.hypix.dataparser.Parser;

public final class BannerParser implements Parser {

    @Override
    public String requiredFile() {
        return "banner.json";
    }

    public ParsedFile parse(final JSONObject banner) {
        final Set<Entry<String,Object>> entries = banner.entrySet();

        final StringBuilder builder = new StringBuilder();
        builder.append(
            """
            package dev.hypix.dataparser.banner;

            import lombok.Getter;

            /* Autogenerated - Don't touch :) */
            @Getter
            public final class Banner {
      
                public static final Banner[] ALL = new Banner[%amount%];
                
                private final String id, translation;

                public Banner(final String id, final String translation) {
                    this.id = id;
                    this.translation = translation;
                }

                private Banner(final String id, final String translation, final int index) {
                    this.id = id;
                    this.translation = translation;
                    ALL[index] = this;
                }

                public static final Banner""".replaceFirst("%amount%", String.valueOf(entries.size()))
        );

        if (!appendBanners(builder, entries)) {
            return null;
        }

        builder.append('}');

        return new ParsedFile(
            "banner/Banner.java",
            builder.toString()
        );
    }

    private boolean appendBanners(final StringBuilder builder, final Set<Entry<String,Object>> entries) {
        int i = 0;
        for (final Entry<String, Object> entry : entries) {
            final String name = entry.getKey();

            if (!(entry.getValue() instanceof JSONObject bannerEntry)) {
                System.out.println("Invalid entry : " + entry.getKey() + " need be a json object...");
                return false;
            }

            final String asset = bannerEntry.getString("asset_id");
            final String translationKey = bannerEntry.getString("translation_key");

            appendBanner(builder, name, asset, translationKey, i);
            builder.append(++i == entries.size() ? ';' : ',');
        }
        return true;
    }

    private void appendBanner(final StringBuilder builder, final String name, final String asset, final String translation, final int index) {
        builder.append('\n');
        builder.append("        ");

        builder.append(toFieldName(name));
        builder.append(" = new Banner(");
        append(builder, asset, translation, index);
        builder.append(')');
    }
}
