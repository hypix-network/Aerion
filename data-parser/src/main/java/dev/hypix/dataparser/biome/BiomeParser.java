package dev.hypix.dataparser.biome;

import java.util.Map.Entry;

import java.util.Set;

import com.alibaba.fastjson2.JSONObject;

import dev.hypix.dataparser.Parser;

public final class BiomeParser implements Parser {

    @Override
    public String requiredFile() {
        return "biome.json";
    }

    @Override
    public ParsedFile parse(JSONObject json) {
        final Set<Entry<String, Object>> entries = json.entrySet();
        final StringBuilder builder = new StringBuilder();
        builder.append(
            """
            package dev.hypix.dataparser.biome;
            import lombok.Getter;

            /* Autogenerated - Don't touch :) */
            @Getter
            public final class Biome {

                public static final Biome[] ALL = new Biome[%amount%];

                private final String id;
                private final double downFall;
                private final boolean hasPrecipitation;
                private final double temperature;
                private final Effects effects;

                public Biome(String id, double downFall, boolean hasPrecipitation, double temperature, Effects effects) {
                    this.id = id;
                    this.downFall = downFall;
                    this.hasPrecipitation = hasPrecipitation;
                    this.temperature = temperature;
                    this.effects = effects;
                }

                private Biome(String id, double downFall, boolean hasPrecipitation, double temperature, Effects effects, int index) {
                    this(id, downFall, hasPrecipitation, temperature, effects);
                    ALL[index] = this;
                }

                public static record Effects(
                    int fogColor,
                    Integer foliageColor,
                    Integer grassColor,
                    String grassColorModifier,
                    String ambientSound,
                    int skyColor,
                    int waterColor,
                    int waterFogColor,
                    MoodSound moodSound,
                    Music music,
                    AdditionSound additionSound,
                    Particle particle
                ){

                    public static record MoodSound(
                        String sound,
                        int tickDelay,
                        int blockSearchExtent,
                        double offSet
                    ){}
                
                    public static record Music(
                        int maxDelay,
                        int minDelay,
                        boolean replaceCurrentMusic,
                        String sound
                    ){}
                
                    public static record AdditionSound(
                        String sound,
                        double tickChance
                    ){}
                
                    public static record Particle(
                        String type,
                        double probability
                    ){}
                }
            
                public static final Biome
            """.replaceFirst("%amount%", String.valueOf(entries.size()))
        );

        int i = 0;
        for (final Entry<String, Object> entry : entries) {
            if (!(entry.getValue() instanceof JSONObject biome)) {
                System.out.println("Invalid entry : " + entry.getKey() + " need be a json object...");
                return null;
            }
            final double downFall = biome.getDoubleValue("downfall");
            final boolean hasPrecipitation = biome.getBooleanValue("has_precipitation");;
            final double temperature = biome.getDoubleValue("temperature");;
            builder.append("        ");
            builder.append(toFieldName(entry.getKey()));
            builder.append(" = new Biome(");

            append(builder, entry.getKey(), downFall, hasPrecipitation, temperature);;
            builder.append(',');
            append(true, false,
                builder,
                appendEffects(biome.getJSONObject("effects")),
                i
            );
            builder.append(')');

            builder.append(++i == entries.size() ? ';' : ',');
            builder.append('\n');
        }

        builder.append('}');
        
        return new ParsedFile("biome/Biome.java", builder.toString());
    }

    private String appendEffects(final JSONObject effects) {
        if (effects == null) {
            return null;
        }
        final StringBuilder builder = new StringBuilder();
        final String mood = getMoodSound(effects.getJSONObject("mood_sound"));
        final String music = getMusic(effects.getJSONObject("music"));
        final String addtions = getAdditionsSound(effects.getJSONObject("additions_sound"));
        final String particle = getParticle(effects.getJSONObject("particle"));

        builder.append("new Effects(");
        append(true, true, builder,
            effects.getIntValue("fog_color"),
            effects.getInteger("foliage_color"),
            effects.getInteger("grass_color"),
            effects.getString("grass_color_modifier"),
            effects.getString("ambient_sound"),
            effects.getIntValue("sky_color"),
            effects.getIntValue("water_color"),
            effects.getIntValue("water_fog_color")
        );
        builder.append(',');
        append(true, false, builder, mood, music, addtions, particle);

        builder.append(')');
        return builder.toString();
    }

    private String getMusic(final JSONObject music) {
        if (music == null) {
            return null;
        } 
        final StringBuilder builder = new StringBuilder();
        builder.append("new Effects.Music(");
        append(builder,
            music.getIntValue("max_delay"),
            music.getIntValue("min_delay"),
            music.getBooleanValue("replace_current_music"),
            music.getString("sound")
        );
        builder.append(')');
        return builder.toString();
    }

    private String getMoodSound(final JSONObject mood) {
        if (mood == null) {
            return null;
        }
        final StringBuilder builder = new StringBuilder();
        builder.append("new Effects.MoodSound(");
        append(builder,
            mood.getString("sound"),
            mood.getIntValue("tick_delay"),
            mood.getIntValue("offset"),
            mood.getIntValue("block_search_extent")
        );
        builder.append(')');
        return builder.toString();
    }

    private String getAdditionsSound(final JSONObject sounds) {
        if (sounds == null) {
            return null;
        }
        final StringBuilder builder = new StringBuilder();
        builder.append("new Effects.AdditionSound(");
        append(builder,
            sounds.getString("sound"),
            sounds.getDoubleValue("tick_chance")
        );
        builder.append(')');
        return builder.toString();
    }

    private String getParticle(final JSONObject particle) {
        if (particle == null) {
            return null;
        }
        final JSONObject options = particle.getJSONObject("options");
        if (options == null) {
            return null;
        }
        final StringBuilder builder = new StringBuilder();
        builder.append("new Effects.Particle(");
        append(builder, options.getString("type"), particle.getDoubleValue("probability"));
        builder.append(')');
        return builder.toString();
    }
}