package dev.hypix.dataparser.wolf;

import java.util.Map.Entry;
import java.util.Set;

import com.alibaba.fastjson2.JSONObject;

import dev.hypix.dataparser.Parser;

public final class WorldVariantParser implements Parser {

    @Override
    public String requiredFile() {
        return "wolf_variant.json";
    }

    @Override
    public ParsedFile parse(final JSONObject json) {
        final Set<Entry<String, Object>> entries = json.entrySet();   
        final StringBuilder builder = new StringBuilder();
        builder.append(
            """
            package dev.hypix.dataparser.wolf;

            import lombok.Getter;

            /* Autogenerated - Don't touch :) */
            @Getter
            public final class WolfType {

                public static final WolfType[] ALL = new WolfType[%amount%];
                private final String id;
                private final String angryTexture, tameTexture, wildTexture;
                private final String biome;
            
                public WolfType(String id, String angryTexture, String tameTexture, String wildTexture, String biome) {
                    this.id = id;
                    this.angryTexture = angryTexture;
                    this.tameTexture = tameTexture;
                    this.wildTexture = wildTexture;
                    this.biome = biome;
                }

                public WolfType(String id, String angryTexture, String tameTexture, String wildTexture, String biome, int index) {
                    this(id, angryTexture, tameTexture, wildTexture, biome);
                    ALL[index] = this;
                }

                public static final WolfType
            """.replaceFirst("%amount%", String.valueOf(entries.size()))
        );
    
        int i = 0;
        for (final Entry<String, Object> entry : entries) {
            if (!(entry.getValue() instanceof JSONObject wolf)) {
                System.out.println("Invalid entry : " + entry.getKey() + " need be a json object...");
                return null;
            }
            final String angryTexture = wolf.getString("angry_texture");
            final String tameTexture = wolf.getString("tame_texture");
            final String wildTexture = wolf.getString("wild_texture");
            final String biome = wolf.getString("biomes");

            builder.append("        ");
            builder.append(toFieldName(entry.getKey()));
            builder.append(" = new WolfType(");
            append(builder, entry.getKey(), angryTexture, tameTexture, wildTexture, biome, i);
            builder.append(')');
            builder.append(++i == entries.size() ? ';' : ',');
            builder.append('\n');
        }
        
        builder.append('}');
        return new ParsedFile("wolf/WolfType.java", builder.toString());
    }
}
