package dev.hypix.dataparser.painting;

import java.util.Map.Entry;
import java.util.Set;

import com.alibaba.fastjson2.JSONObject;

import dev.hypix.dataparser.Parser;

public final class PaintingParser implements Parser {

    @Override
    public String requiredFile() {
        return "painting.json";
    }

    @Override
    public ParsedFile parse(final JSONObject json) {
        final Set<Entry<String, Object>> entries = json.entrySet();   
        final StringBuilder builder = new StringBuilder();
    
        builder.append(
            """
            package dev.hypix.dataparser.painting;

            import lombok.Getter;

            /* Autogenerated - Don't touch :) */
            @Getter
            public final class Painting {

                public static final Painting[] ALL = new Painting[%amount%];

                private final String id;
                private final int height;
                private final int width;

                public Painting(final String id, int height, int width) {
                    this.id = id;
                    this.height = height;
                    this.width = width;
                }
                
                private Painting(final String id, int height, int width, int index) {
                    this(id, height, width);
                    ALL[index] = this;
                }

                public static final Painting
            """.replaceFirst("%amount%", String.valueOf(entries.size()))
        );
    
        int i = 0;
        for (final Entry<String, Object> entry : entries) {
            if (!(entry.getValue() instanceof JSONObject painting)) {
                System.out.println("Invalid entry : " + entry.getKey() + " need be a json object...");
                return null;
            }

            final String assetId = painting.getString("asset_id");
            final int height = painting.getIntValue("height");
            final int width = painting.getIntValue("width");

            builder.append("        ");
            builder.append(toFieldName(entry.getKey()));
            builder.append(" = new Painting(");
            append(builder, assetId, height, width, i);
            builder.append(')');
            builder.append(++i == entries.size() ? ';' : ',');

            builder.append('\n');
        }

        builder.append('}');
        return new ParsedFile("painting/Painting.java", builder.toString());
    }
}